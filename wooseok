from itertools import permutations

def solution(n, weak, dist):
   length = len(weak)
   for i in range(length):
     weak.append(weak[i]+n)
     # 외벽 길이를 2배로 늘려서 일자 형태로 변형
   answer = len(dist) + 1 
      # 투입할 친구의 최대값 임의 설정
   for start in range(length):  # 시작점은 0~(length-1)까지 가능
      for friends in list(permutations(dist,len(dist))):
         count = 1 # 투입할 친구의 수
         position = weak[start] + friends[count-1]
         for index in range(start, start+length):
             if position < weak[index]:
                 count += 1 # 새로운 친구 투입
                 if count > len(dist):
                   break
                 position = weak[index] + friends[count -1]
         answer = min(answer,count)
   if answer > len(dist):
       return -1
   return answer


def solution2(n, weak, dist):
   length = len(weak)  # 취약 외벽 갯수
   for i in range(length):
     weak.append(weak[i]+n)
     # 외벽 길이를 2배로 늘려서 일자 형태로 변형*
   answer = 100 # (초기값으로 큰값이면 무관)
   for start in range(length):  # 시작점은 0~(length-1)까지 가능(index셈법)
      dist.sort(reverse=True)
      count = 1 # 투입할 친구의 수
      position = weak[start] + dist[count-1]
      for index in range(start, start+length):
          if position < weak[index]: # weak 취약지점들이 start~position 사이에 다 있는지!
              count += 1 # 새로운 친구 투입
              if count > len(dist):
                 break
              position = weak[index] + dist[count -1]
      answer = min(answer, count)
   if answer > len(dist):
       return -1
   return answer
